// Generated by CoffeeScript 1.8.0
(function() {
  var TodoApp, displayInfo;

  TodoApp = (function() {
    function TodoApp() {
      this.cacheElements();
      this.bindEvents();
      this.displayItems();
    }

    TodoApp.prototype.cacheElements = function() {
      this.$input = $('#new-todo');
      this.$todoList = $('#todo-list');
      return this.$clearCompleted = $('#clear-completed');
    };

    TodoApp.prototype.bindEvents = function() {
      $('#message').hide();
      this.$input.on('keyup', (function(_this) {
        return function(e) {
          return _this.create(e);
        };
      })(this));
      this.$todoList.on('click', '.destroy', (function(_this) {
        return function(e) {
          return _this.destroy(e.target);
        };
      })(this));
      this.$todoList.on('change', '.toggle', (function(_this) {
        return function(e) {
          return _this.toggle(e.target);
        };
      })(this));
      return this.$clearCompleted.on('click', (function(_this) {
        return function(e) {
          return _this.clear(e.target);
        };
      })(this));
    };

    TodoApp.prototype.create = function(e) {
      var $input, randomId, val;
      $input = $(e.target);
      val = $.trim(this.$input.val());
      if (!(e.which === 13 && val)) {
        return;
      }
      randomId = Math.floor(Math.random() * 999999);
      localStorage.setObj(randomId, {
        id: randomId,
        title: val,
        completed: false
      });
      this.$input.val('');
      displayInfo('Item added to your list');
      return this.displayItems();
    };

    TodoApp.prototype.displayItems = function() {
      var id, _i, _len, _ref, _results;
      this.clearItems();
      _ref = Object.keys(localStorage);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        _results.push(this.addItem(localStorage.getObj(id)));
      }
      return _results;
    };

    TodoApp.prototype.clearItems = function() {
      return this.$todoList.empty();
    };

    TodoApp.prototype.addItem = function(item) {
      var checked, completed, html, id, renderer, template, title, _ref, _ref1;
      template = $('#itemTemplate').html();
      renderer = Handlebars.compile(template);
      completed = (_ref = item.completed) != null ? _ref : {
        'completed': ''
      };
      id = item.id;
      checked = (_ref1 = item.completed) != null ? _ref1 : {
        'checked': ''
      };
      title = item.title;
      html = renderer({
        "completed": completed,
        "id": id,
        "checked": checked,
        "title": title
      });
      console.log(html);
      return this.$todoList.append(html);
    };

    TodoApp.prototype.destroy = function(element) {
      var id;
      id = $(element).closest('li').data('id');
      localStorage.removeItem(id);
      this.displayItems();
      return displayInfo('Item removed1c');
    };

    TodoApp.prototype.toggle = function(element) {
      var id, item;
      id = $(element).closest('li').data('id');
      item = localStorage.getObj(id);
      item.completed = !item.completed;
      return localStorage.setObj(id, item);
    };

    TodoApp.prototype.clear = function() {
      var id, _i, _len, _ref;
      _ref = Object.keys(localStorage);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        this.removeItem(localStorage.getObj(id));
      }
      this.displayItems();
      return displayInfo('Completed items cleared');
    };

    TodoApp.prototype.removeItem = function(item) {
      if (item.completed) {
        return localStorage.removeItem(item.id);
      }
    };

    return TodoApp;

  })();

  $(function() {
    var app;
    return app = new TodoApp();
  });

  Storage.prototype.setObj = function(key, obj) {
    return this.setItem(key, JSON.stringify(obj));
  };

  Storage.prototype.getObj = function(key) {
    return JSON.parse(this.getItem(key));
  };

  displayInfo = function(msg) {
    return $('#message').fadeIn('fast').text(msg).delay(2000).fadeOut('fast');
  };

}).call(this);
